//
//  DetailPlacePresenter.swift
//  GoodPlaces
//
//  Created by Lucas  N Santana on 02/12/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailPlacePresentationLogic {
    func presentDetail(response: DetailPlace.Detail.Response)
    func presentError(error: Error)
    func displayAlert(message:String)
    func presentLoading()
    func hideLoading()
}

class DetailPlacePresenter: DetailPlacePresentationLogic {
    weak var viewController: DetailPlaceDisplayLogic?
    
    // MARK: DetailPlacePresentationLogic
    func presentDetail(response: DetailPlace.Detail.Response) {
        let p = response.place
        let name = p?.name ?? "Unavailable Name"
        let address = p?.address ?? "Unavailable address"
        let distance = getStringFrom(float: p?.distance)
        let typesString = getTypesFormatted(p?.types)
        let rating = getStringFrom(float: p?.rating)
        let phone = p?.phoneNumber ?? "-"
        let reviews = getReviews(p?.reviews)
        
        let viewModel = DetailPlace.Detail.ViewModel(iconUrl: response.place?.icon,
                                                     name: name,
                                                     address: address,
                                                     distance: "Distance: \(distance)km",
                                                     types: typesString,
                                                     rating: rating,
                                                     phoneBtn: "Call: \(phone)",
                                                     reviews: reviews)
        viewController?.displayDetail(viewModel: viewModel)
    }
    func presentError(error: Error){
        let viewModel = AlertViewModel(title: "Error", message: "\(error.localizedDescription)", buttonTitle:"OK")
        viewController?.displayAlert(viewModel: viewModel)
    }
    func displayAlert(message:String) {
        let viewModel = AlertViewModel(title: "Atention", message: message, buttonTitle:"OK")
        viewController?.displayAlert(viewModel: viewModel)
    }
    private func getStringFrom(float: Float?) -> String {
        guard let float = float else { return "-" }
        return String(format: "%.2f", float)
    }
    
    private func getTypesFormatted(_ types: [String]?) -> String {
        var typesString = "-"
        if let types = types {
            typesString = ""
            for t in types {
                typesString += "\(t),"
            }
            typesString = String(typesString.dropLast())
        }
        return typesString
    }
    private func getReviews(_ reviews: [PlaceReview]?) -> [String] {
        var reviews: [String] = reviews?.map({
            return "Author: \($0.authorName ?? "-")\nRate: \(getStringFrom(float: $0.rating))\nWhen: \($0.timeDesc ?? "")\n\($0.textReview ?? "")\n"
            
        }) ?? []
        reviews.insert("Reviews:\n\n", at: 0)
        return reviews
    }
    func presentLoading() {
        viewController?.displayLoading()
    }
    func hideLoading(){
        viewController?.hideLoading()
    }
}
