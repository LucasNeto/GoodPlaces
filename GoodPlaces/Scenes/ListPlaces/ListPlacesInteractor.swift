//
//  ListPlacesInteractor.swift
//  GoodPlaces
//
//  Created by Lucas  N Santana on 27/11/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum PlaceSortEnum {
    case rating
    case name
    case opened
    case distance
}

protocol ListPlacesBusinessLogic {
    func getPlaces()
    func select(index: Int)
    func sort(by: PlaceSortEnum)
}

protocol ListPlacesDataStore {
    var placeSelected: Place? { get set }
}

class ListPlacesInteractor: ListPlacesBusinessLogic, ListPlacesDataStore {
    //Dependecies
    var presenter: ListPlacesPresentationLogic?
    var worker: ListPlacesWorkerProtocol?
    
    //Variables
    var places: [Place] = []
    var sortType: PlaceSortEnum = .rating
    var placeSelected: Place?
    
    init(_ worker: ListPlacesWorkerProtocol? = nil){
        self.worker = worker ?? ListPlacesWorker()
    }
    // MARK: ListPlacesBusinessLogic
    func getPlaces() {
        presenter?.presentLoading()
        worker?.getPlaces(completion: { (result) in
            self.presenter?.hideLoading()
            switch result {
            case .success(let model):
                self.showPlaces(model)
            case .failure(let error):
                self.presenter?.presentError(error: error)
            }
        })
    }
    func select(index: Int) {
        if index < self.places.count {
            placeSelected = self.places[index]
            presenter?.presentDetail()
        }
    }
    func sort(by sortType: PlaceSortEnum) {
        self.sortType = sortType
        showPlaces(places)
    }
    
    private func showPlaces(_ places:[Place]){
        self.places = self.sortPlaces(places)
        let response = ListPlaces.List.Response(places: self.places)
        self.presenter?.presentPlaces(response: response)
    }
    
    
    //MARK: Filter
    private func sortPlaces(_ places: [Place]) -> [Place] {
        return sort(places: places, sortBy: self.sortType)
    }
    private func sort(places:[Place], sortBy: PlaceSortEnum) -> [Place] {
        switch sortBy {
        case .rating:
            return places.sorted(by: { return $0.rating ?? 0 > $1.rating ?? 0 })
        case .name:
            return places.sorted(by: { return $0.name ?? "" < $1.name ?? "" })
        case .opened:
            return places.sorted(by: {
                guard let openNow0 = $0.opening?.openNow,
                    let openNow1 = $1.opening?.openNow else { return false }
                return openNow0 || openNow1
            })
        case .distance:
            return places.sorted(by: { return $0.distance ?? 0.0 < $1.distance ?? 0.0 })
        }
    }
}


