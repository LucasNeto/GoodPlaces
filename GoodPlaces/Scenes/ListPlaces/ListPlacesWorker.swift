//
//  ListPlacesWorker.swift
//  GoodPlaces
//
//  Created by Lucas  N Santana on 27/11/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPlacesWorkerProtocol {
    func getPlaces(completion: @escaping(Result<[Place],ServiceError>)->())
}

class ListPlacesWorker: ListPlacesWorkerProtocol {
    private var location: LocationHelper!
    private var googleService: GoogleServicesProtocol!
    private var types: [String] = ["bar","cafe","restaurant"]
    
    init(){
        location = LocationHelper()
        googleService = GoogleServices()
        location.requestIfNeeded()
    }
    func getPlaces(completion: @escaping(Result<[Place],ServiceError>)->()) {
        var requestsCount = 0
        var places: [Place]?
        for t in types {
            self.getPlaceByType(t) { result in
                requestsCount+=1
                switch result {
                case .success(let model):
                    if places != nil {
                        places?.append(contentsOf: model)
                    }else{
                        places = model
                    }
                default: break
                }
                if requestsCount >= self.types.count {
                    if let places = places {
                        let placesFilled = self.getDistances(places: places)
                        completion(.success(placesFilled))
                    }else{
                        completion(.failure(ServiceError("Error to get Places")))
                    }
                }
            }
        }
    }
    private func getPlaceByType(_ type: String,completion: @escaping(Result<[Place],ServiceError>)->()){
        let lat = location.getLat() ?? ""
        let lng = location.getLng() ?? ""
        let radius = "1500"
        let request = PlaceRequest(type: type, lat: lat, lng: lng, radius: radius)
        googleService.nearbysearch(request) { (result:PlaceResponse?, error:ServiceError?) in
            if let error = error {
                completion(.failure(error))
                return
            }
            if let response = result {
                completion(.success(response.results ?? []))
                return
            }
            completion(.failure(ServiceError("Error to get Places")))
        }
    }
    private func getDistances(places: [Place]) -> [Place] {
        var placesFilled = [Place]()
        for var p in places {
            p.distance = location.getDistanceFromMe(toLat: p.geometry?.location?.lat, toLng: p.geometry?.location?.lng)
            placesFilled.append(p)
        }
        return placesFilled
    }
}
