//
//  ListPlacesPresenter.swift
//  GoodPlaces
//
//  Created by Lucas  N Santana on 27/11/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPlacesPresentationLogic {
    func presentPlaces(response: ListPlaces.List.Response)
    func presentError(error: Error)
    func presentDetail()
    func presentLoading()
    func hideLoading()
}

class ListPlacesPresenter: ListPlacesPresentationLogic {
    weak var viewController: ListPlacesDisplayLogic?
    
    // MARK: ListPlacesPresentationLogic
    func presentPlaces(response: ListPlaces.List.Response) {
        if response.places.isEmpty {
            let viewModel = AlertViewModel(title: "Atention", message: "Unfortunately we dont have places close to you, try again in another place.", buttonTitle:"OK")
            viewController?.displayAlert(viewModel: viewModel)
            return
        }
        let itens: [ListPlaces.List.ListPlaceViewModel] = response.places.map({
            let openNow = $0.opening?.openNow ?? false ? "Opened" : "Closed"
            let rating = $0.rating != nil ? String(format: "%.2f", $0.rating ?? 0) : "-"
            let distance = $0.distance != nil ? String(format: "%.2f", $0.distance ?? 0) : "-"
            return ListPlaces.List.ListPlaceViewModel(name: $0.name ?? "-",
                                               openNow: openNow,
                                               rating: rating,
                                               distance: distance)
            
        })
        let viewModel = ListPlaces.List.ViewModel(itens: itens)
        viewController?.displayPlaces(viewModel: viewModel)
    }
    func presentError(error: Error){
        let viewModel = AlertViewModel(title: "Error", message: "\(error.localizedDescription)", buttonTitle:"OK")
        viewController?.displayAlert(viewModel: viewModel)
    }
    func presentDetail(){
        viewController?.displayDetail()
    }
    func presentLoading(){
        viewController?.displayLoading()
    }
    func hideLoading(){
        viewController?.hideLoading()
    }
}
