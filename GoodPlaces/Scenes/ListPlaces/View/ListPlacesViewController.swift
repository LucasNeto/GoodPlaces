//
//  ListPlacesViewController.swift
//  GoodPlaces
//
//  Created by Lucas  N Santana on 27/11/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPlacesDisplayLogic: BaseViewControllerProtocol {
    func displayPlaces(viewModel: ListPlaces.List.ViewModel)
    func displayDetail()
}

class ListPlacesViewController: UITableViewController, ListPlacesDisplayLogic {
    var interactor: ListPlacesBusinessLogic?
    var router: (NSObjectProtocol & ListPlacesRoutingLogic & ListPlacesDataPassing)?
    
    private let reusableID = "listPlacesReusableID"
    var itens: [ListPlaces.List.ListPlaceViewModel] = []
    var activityIndicator: UIActivityIndicatorView?
    
    override init(style: UITableView.Style) {
        super.init(style: style)
        setup()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ListPlacesInteractor()
        let presenter = ListPlacesPresenter()
        let router = ListPlacesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        getPlaces()
    }
    func getPlaces(){
        interactor?.getPlaces()
    }
    //MARK: Setups
    func setupViews(){
        self.title = "Places"
        setupTableView()
        setupLoadingView()
        setupFilterBtn()
    }
    func setupTableView(){
        self.tableView.register(ListPlaceTableViewCell.self, forCellReuseIdentifier: reusableID)
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(refresh), for: UIControl.Event.valueChanged)
        self.tableView.refreshControl = refreshControl
    }
    func setupFilterBtn(){
        let btn = UIBarButtonItem(title: "Sort", style: .plain, target: self, action: #selector(filterTapped))
        self.navigationController?.navigationBar.topItem?.rightBarButtonItem = btn
    }
    @objc func filterTapped(){
        let alert = UIAlertController(title: "Sort by", message: "Choose witch way do you would like to sort the places?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Rating", style: .default, handler: { (action) in
            self.interactor?.sort(by: .rating)
        }))
        alert.addAction(UIAlertAction(title: "Name", style: .default, handler: { (action) in
            self.interactor?.sort(by: .name)
        }))
        alert.addAction(UIAlertAction(title: "Open/Closed", style: .default, handler: { (action) in
            self.interactor?.sort(by: .opened)
        }))
        alert.addAction(UIAlertAction(title: "Distance", style: .default, handler: { (action) in
            self.interactor?.sort(by: .distance)
        }))
        alert.addAction(UIAlertAction(title: "Cancel", style: .destructive, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    // MARK: ListPlacesDisplayLogic
    func displayPlaces(viewModel: ListPlaces.List.ViewModel) {
        self.itens = viewModel.itens
        self.tableView.reloadData()
    }
    
    func displayDetail() {
        router?.routeToDetail()
    }
    
    //MARK: Helpers
    @objc func refresh(sender:AnyObject) {
        getPlaces()
    }
}
extension ListPlacesViewController {
    // MARK: - Table view data source
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.itens.count
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell : ListPlaceTableViewCell = tableView.dequeueReusableCell(withIdentifier: reusableID, for: indexPath) as? ListPlaceTableViewCell else { return UITableViewCell()}
        
        let item = self.itens[indexPath.row]
        cell.title = item.name
        cell.status = item.openNow
        cell.ratingText = item.rating
        cell.distance = item.distance
        return cell
    }
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.interactor?.select(index: indexPath.row)
    }
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
